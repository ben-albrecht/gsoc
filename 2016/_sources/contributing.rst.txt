.. _gsoc-contributing:

Contributing
============

The first step to contributing to Chapel is to familiarize yourself with the
language itself. The `Learning Chapel`_ page is a great resource for getting
started with this. It is preferred that you start by learning about the
language before diving into the compiler or runtime code. This will generally
be a more rewarding experience, and will provide opportunities for
tractable contributions to the project. Below are some examples of ways to
contribute to Chapel while learning.

.. note::

    Before submitting any pull requests to Chapel, be sure to fill out and send
    us a `contributor agreement`_. We won't be able to accept your pull
    requests without it.

.. _contributor agreement: https://github.com/chapel-lang/chapel/tree/master/doc/developer/contributorAgreements

Coding Challenges and Idioms
----------------------------

Tackle some popular coding challenges or programming idioms in Chapel.
Show off your progress in a public repository. Ask for feedback
from fellow Chapel developers and users. This is a chance to learn about and
utilize Chapel's unique features and strengths in productive parallel
programming.  Depending on the quality of the implementations, the code could
be featured on Chapel's website as a coding sample or even added to the
examples directory in subsequent releases.

Some programming challenge sites:

* `Project Euler`_
* `Sphere Online Judge`_
* `Google Code Jam`_

.. _`Project Euler`: https://projecteuler.net/
.. _`Sphere Online Judge`: http://www.spoj.com/problems/classical/
.. _`Google Code Jam`: https://code.google.com/codejam/contests.html

Some programming idiom sites:

* `Rosetta Code`_
* `Programming-Idioms`_

.. _`Rosetta Code`: http://rosettacode.org/wiki/Rosetta_Code
.. _`Programming-Idioms`: http://www.programming-idioms.org/

Code currently featured in Chapel's release:

* `Examples Directory`_
* `Patterns Directory`_ (work in progress, idioms can be contributed here)

.. _`Examples Directory`: https://github.com/chapel-lang/chapel/tree/master/test/release/examples
.. _`Patterns Directory`: https://github.com/chapel-lang/chapel/tree/master/test/release/examples/patterns

Ports
-----

Port a small application, library, or benchmark to Chapel. Take advantage of
the `chpldoc`_ tool to generate HTML documentation for your code.
This is a great way to get started if you are interested in pursuing a
:ref:`ideas-demos` project. If a benchmark is unique or important enough, a
performance version of the test may be added to the test suite to track its
performance across releases.


.. _`chpldoc`: http://chapel-lang.org/docs/master/tools/chpldoc/chpldoc.html

Some example benchmarks:

* `IMSuite`_
* `PRK`_
    * Existing `Chapel PRKs`_ (only 3 ported so far)
* `Julia Benchmarks`_

.. _`IMSuite`: http://www.cse.iitm.ac.in/~suyash/imsuite/benchmark_details.html
.. _`PRK`: https://github.com/ParRes/Kernels
.. _`Chapel PRKs`: https://github.com/chapel-lang/chapel/tree/master/test/studies/prk
.. _`Julia Benchmarks`: http://julialang.org/benchmarks/

Existing benchmarks and performance tracking in Chapel:

* `Some of Chapel's Benchmarks`_
* `Performance Overview`_
* `Performance Tracking Benchmarks`_

.. _`Some of Chapel's Benchmarks`: https://github.com/chapel-lang/chapel/tree/master/test/studies
.. _`Performance Overview`: http://chapel.sourceforge.net/perf/
.. _`Performance Tracking Benchmarks`: http://chapel.sourceforge.net/perf/chapcs/?suite=performancetracking

Bugs
----

Identifying bugs in code is nearly half the battle. By working on any of the other
introductory tasks, you may cross paths with a bug or two. Reporting these bugs so
that they can be tracked in the test system and eventually fixed is incredibly
helpful to the project.

You can follow the steps outlined in the `Reporting Chapel Bugs`_ page to give
a formal bug, or you can take it one step further by characterizing the bug
with a small reproducible test, and contributing it to the repository in the
``test/`` directory. See the `Test System`_ best practices for more information
about tracking bugs.

.. _`Reporting Chapel Bugs`: http://chapel-lang.org/docs/master/usingchapel/bugs.html
.. _`Test System`: https://github.com/chapel-lang/chapel/blob/master/doc/developer/bestPractices/TestSystem.rst

.. note::

    As shown on the `Reporting Chapel Bugs`_ page, many known bugs are tracked
    on our JIRA site. Bug tracking on JIRA is relatively new in Chapel and
    still an ongoing transition. Currently, there is no need to create an issue
    on JIRA for new bugs.

We do *not* recommend fixing bugs as an introductory task for new
Chapel developers. If bugs are easy to fix, we typically fix them
as soon as they are reported. This means the remaining tracked bugs are
generally difficult to solve, which would likely be an unpleasant task for a
new Chapel developer.

Documentation
-------------

Chapel's documentation was originally made up of just the `language specification`_.
Since `version 1.11`_, there has been an ongoing effort to produce online
documentation meant for users rather than developers.
The current `documentation`_ has come a long way since `version 1.11`_, but there is
certainly much more work to do.

If you find something unclear, or can't find it at all, it is
extremely helpful to the project to bring it to the attention of developers
and/or improve the documentation.

All of the online `documentation`_ is generated as a Sphinx project.
Module documentation is written in the comments of the `module code`_ and converted into
restructured text (ReST) via `chpldoc`_. All other documentation is contained
within `doc/release`_ and `doc/sphinx/source`_.


.. _`language specification`: http://chapel-lang.org/docs/master/language/spec.html
.. _`version 1.11`: http://chapel-lang.org/docs/1.11/index.html
.. _`Learning Chapel`: http://chapel-lang.org/learning.html
.. _`documentation`: http://chapel-lang.org/docs/master/
.. _`module code`: https://github.com/chapel-lang/chapel/tree/master/modules
.. _`doc/release`: https://github.com/chapel-lang/chapel/tree/master/doc/release
.. _`doc/sphinx/source`: https://github.com/chapel-lang/chapel/tree/master/doc/sphinx/source


Coverity
--------

We use Coverity to try and keep our code free of obvious coding bugs.  Some
issues it flags are important bugs and others are false negatives.  It is a
goal of the project to drive the number of open Coverity issues down to zero,
either by fixing the issues, proving to Coverity that they are not issues
(e.g., through assertions), or suppressing the issues.

You can view Coverity scans by visiting the `Coverity Project`_ page for Chapel
and requesting access.

.. _`Coverity Project`: https://scan.coverity.com/projects/chapel
