.. _gsoc-contributing:

Contributing
============

The first step to contributing to Chapel is to familiarize yourself with the
language itself. The `Learning Chapel`_ page is a great resource for getting
started with this. It is preferred that you start by learning about the
language before diving into the compiler or runtime code. This will generally
be a more rewarding experience, and will provide opportunities for
tractable contributions to the project. Below are some examples of ways to
contribute to Chapel while learning.

.. note::

    Before submitting any pull requests to Chapel, be sure to fill out and send
    us a `contributor agreement`_. We won't be able to accept your pull
    requests without it.

.. _contributor info: https://github.com/chapel-lang/chapel/blob/master/doc/rst/developer/bestPractices/ContributorInfo.rst
.. _contributor agreement: https://github.com/chapel-lang/chapel/tree/master/doc/rst/developer/contributorAgreements

Coding Challenges and Idioms
----------------------------

Tackle some popular coding challenges or programming idioms in Chapel.
Show off your progress in a public repository. Ask for feedback
from fellow Chapel developers and users. This is a chance to learn about and
utilize Chapel's unique features and strengths in productive parallel
programming.  Depending on the quality of the implementations, the code could
be featured on Chapel's website as a coding sample or even added to the
examples directory in subsequent releases.

Some programming challenge sites:

* `Project Euler`_
* `Sphere Online Judge`_
* `Google Code Jam`_

.. _`Project Euler`: https://projecteuler.net/
.. _`Sphere Online Judge`: http://www.spoj.com/problems/classical/
.. _`Google Code Jam`: https://code.google.com/codejam/contests.html

Some programming idiom sites:

* `Rosetta Code`_
* `Programming-Idioms`_
* `Exercism.io`_

  + See the existing `checklist`_.

.. _`Rosetta Code`: http://rosettacode.org/wiki/Rosetta_Code
.. _`Programming-Idioms`: http://www.programming-idioms.org/
.. _`Exercism.io`: http://exercism.io/
.. _`checklist`: https://github.com/exercism/xchapel/issues/1

Code currently featured in Chapel's release:

* `Examples Directory`_
* `Patterns Directory`_ (work in progress, idioms can be contributed here)

.. _`Examples Directory`: https://github.com/chapel-lang/chapel/tree/master/test/release/examples
.. _`Patterns Directory`: https://github.com/chapel-lang/chapel/tree/master/test/release/examples/patterns

Ports
-----

Port a small application, library, or benchmark to Chapel. Take advantage of
the `chpldoc`_ tool to generate HTML documentation for your code.
This is a great way to get started if you are interested in pursuing a
:ref:`ideas-demos` project. If a benchmark is unique or important enough, a
performance version of the test may be added to the test suite to track its
performance across releases.


.. _`chpldoc`: http://chapel-lang.org/docs/master/tools/chpldoc/chpldoc.html

Some example benchmarks:

* `IMSuite`_

  + Existing `IMSuite Implementations`_

* `PRK`_

  + Existing `PRK Implementations`_

* `Julia Benchmarks`_

.. _`IMSuite Implementations` : https://github.com/chapel-lang/chapel/tree/master/test/studies/IMSuite
.. _`IMSuite`: http://www.cse.iitm.ac.in/~suyash/imsuite/benchmark_details.html
.. _`PRK`: https://github.com/ParRes/Kernels
.. _`PRK Implementations`: https://github.com/chapel-lang/chapel/tree/master/test/studies/prk
.. _`Julia Benchmarks`: http://julialang.org/benchmarks/

Existing benchmarks and performance tracking in Chapel:

* `Chapel CLBG Entries`_

  + `CLBG Website`_
  + `CLBG Performance`_

* `Some of Chapel's Benchmarks`_
* `Performance Overview`_
* `Performance Tracking Benchmarks`_

.. _`Chapel CLBG Entries` : https://github.com/chapel-lang/chapel/tree/master/test/release/examples/benchmarks/shootout
.. _`CLBG Performance` : http://chapel.sourceforge.net/perf/chapcs/?suite=submittedshootoutbenchmarks
.. _`CLBG Website` : http://benchmarksgame.alioth.debian.org/u64q/chapel.html
.. _`Some of Chapel's Benchmarks`: https://github.com/chapel-lang/chapel/tree/master/test/studies
.. _`Performance Overview`: http://chapel.sourceforge.net/perf/
.. _`Performance Tracking Benchmarks`: http://chapel.sourceforge.net/perf/chapcs/?suite=performancetracking

Bugs
----

Identifying bugs in code is nearly half the battle. By working on any of the other
introductory tasks, you may cross paths with a bug or two. Reporting these bugs
as `GitHub issues`_ is incredibly helpful to the project. See the
`Reporting Chapel Bugs`_ page for more details.

In addition to reporting the bug, you can take it one step further by
characterizing the bug with a small reproducible test, and contributing it to
the repository in the ``test/`` directory. These types of tests are referred to
as future tests on the Chapel team. See the `Test System`_ best practices for
more information about how we track bugs in the testing system.

.. _`GitHub issues`: https://github.com/chapel-lang/chapel/issues
.. _`Reporting Chapel Bugs`: http://chapel-lang.org/docs/master/usingchapel/bugs.html
.. _`Test System`: https://github.com/chapel-lang/chapel/blob/master/doc/rst/developer/bestPractices/TestSystem.rst

Once familiar with the testing system, the bug reporting system, and an area of
the project (such as compiler, runtime, or the language itself), tackling an
issue labeled `easy`_ is a great way to contribute early on.

.. _`easy`: https://github.com/chapel-lang/chapel/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20label%3Aeasy%20

Documentation
-------------

If you find something unclear, or can't find it at all, it is
extremely helpful to the project to bring it to the attention of developers
through a GitHub issue and/or improve the documentation by opening a pull
request.

All of the online `documentation`_ is generated as a Sphinx project.
Module documentation is written as block comments in the `module code`_ and
converted into restructured text (reST) via `chpldoc`_. All other documentation
is written natively as reST and contained within the `doc/`_ directory.


.. _`language specification`: http://chapel-lang.org/docs/master/language/spec.html
.. _`version 1.11`: http://chapel-lang.org/docs/1.11/index.html
.. _`Learning Chapel`: http://chapel-lang.org/learning.html
.. _`documentation`: http://chapel-lang.org/docs/master/
.. _`module code`: https://github.com/chapel-lang/chapel/tree/master/modules
.. _`doc/`: https://github.com/chapel-lang/chapel/tree/master/doc
