
.. _gsoc-ideas:

Project List
============

This is the project list for Google Summer of Code with Chapel. The current
list of projects will continue to grow as mentors sign up for projects.

The project ideas in this list have been compiled by Chapel developers.
Students may submit proposals based on existing ideas here or new ideas
altogether.

.. note::
    If you are interested in applying for Chapel's Google Summer of Code 2018,
    start here:

    - :ref:`gsoc-apply`


.. Suggested Format:
    .. topic:: <Project Title>

        :Description:
            <description>

        :Expected results:
            <what we expect as final product of 12 weeks>

        :Required knowledge:
            <language(s) and technology(s)>

            * C/C++

        :Optional knowledge:
            <language(s) and technology(s)>

            * Chapel
            * Familiarity with parallelism

        :Mentor(s):
            <Team member(s) ideal for mentoring this project>

            Brad Chamberlain

.. topic:: Your favorite application or library in Chapel

    :Description:
        Build any application in Chapel that might show off its productivity,
        performance, and/or elegance. This could be anything from a port of an
        email client library to a standalone molecular dynamics engine. The
        world is your oyster, and we're excited to mentor you along the way to
        building your application in Chapel.

    :Expected results:
        Expectations will be tuned specifically to the project. In a general
        sense, the application or library should reach a state that is ready for
        public use.

    :Optional knowledge:

        * Chapel

    :Mentor(s):
        All mentors are available for this project depending on the topic

.. topic:: Unit Test Library

    :Description:
       Build a unit test library for Chapel. Design and implement
       a unit test library for Chapel. This can be implemented as a language
       feature such as `D`_ or a library such as `Python`_.

    :Expected results:
        A unit test library for Chapel

    :Optional knowledge:
        * Chapel
        * Experience with testing libraries

    :Mentor(s):
        `Ben Albrecht`_

.. _Ben Albrecht: https://github.com/ben-albrecht
.. _Python: https://docs.python.org/3.6/library/unittest.html
.. _D: https://dlang.org/spec/unittest.html


.. topic:: Provide Chapel Interface to C libraries - GSL and GMP

    :Description:

        An important requirement of adoption of a programming language is that
        the environment comes with “Batteries Included” - that there is
        standard library support for the sort of operations and data structures
        that a programmer in that environment would want.

        For a technical computing language such as Chapel, focussing on
        scientific and machine learning use cases, that means there needs to be
        a bedrock of scientific and numerical computing tools - random
        distributions, solutions of ordinary differential equations,
        combinatorics, high-precision rational numbers.  These modules, if
        available, would be very frequently used by Chapel programmers.

        Because many of these pieces are so foundational, C libraries already
        exist for them, and Chapel has a tool to write the boilerplate code for
        wrapping such library calls.  This project would involve creating
        modules containing clear, “Chapel-ic” APIs to these routines, ensuring
        that the functionality integrates nicely with the rest of the Chapel
        standard library, and writing tests to ensure their correctness.

        Modules would include (with Python analogies):

        - A ``numpy.random``/``scipy.stats``-like module wrapping GSLs random distributions and random number generation.
        - Extending the existing `GMP`_-wrapped `BigInt`_ support to include Rational and/or arbitrary-precision floating point support.
        - A ``scipy.integrate``-like module for solving ordinary differential equations and numerical quadrature.
        - A ``scipy.interpolate`` like module for numerical interpolation,
        - A ``scipy.special`` like module for special functions,
        - An ``itertools`` like module for permutations and combinations.

    :Expected results:
        New modules for the features listed above.

    :Optional knowledge:

        * Chapel
        * Experience with GSL, GMP, or other libraries to be exposed

    :Mentor(s):
        `Jonathan Dursi`_

.. _Jonathan Dursi: https://www.dursi.ca/
.. _GMP: https://chapel-lang.org/docs/master/modules/standard/GMP.html
.. _BigInt: https://chapel-lang.org/docs/master/modules/standard/BigInteger.html

.. topic:: Implementing and Optimizing Distributed Benchmarks

    :Description:
        Distributed memory performance has historically been an important focus
        for Chapel. Two notable distributed performance test suites are `NAS Parallel
        Benchmarks`_ (NPB) and `Parallel Research Kernels`_ (PRK).

        While some of these benchmarks are already implemented in Chapel, many of
        the existing implementations are not yet optimized or are only partially
        implemented. There are also several benchmarks with no implementation yet. See
        these issues for current status: Improve PRKs (`#6162`_) Improve NPBs (`#8355`_)

        This project aims at writing and improving implementations of the NPB and PRK
        distributed memory benchmarks. This is a great opportunity for students to
        write multilocale scientific kernels in Chapel, explore the impact of optimizations on
        those kernels, and see how fast they can get the benchmarks to go.

    :Expected results:
        Implementations of new benchmarks or improvements of existing benchmarks.

    :Optional knowledge:

        * Chapel

    :Mentor(s):
        `Engin Kayraklioglu`_

.. _Engin Kayraklioglu: https://github.com/e-kayrakli
.. _NAS Parallel Benchmarks: https://www.nas.nasa.gov/publications/npb.html
.. _Parallel Research Kernels: https://github.com/ParRes/Kernels
.. _#6162: https://github.com/chapel-lang/chapel/issues/6162
.. _#8355: https://github.com/chapel-lang/chapel/issues/8355


.. topic:: Tools for High Performance Data Structures and Algorithms

    :Description:

        This is an exploratory project for investigating the implementation and
        performance trade-offs of different types of synchronization as well as
        memory reclamation. Data structures that are intended for high
        performance generally are `non-blocking`_ and provide either
        obstruction-free, lock-free, or wait-free guarantees on their supported
        operations. These operations require support for atomics and  memory
        barriers/fences; while Chapel supports atomic operations on all
        primitive types, due to limitations with hardware it does not yet allow
        atomic operations on objects even if they are not remote. Secondly the
        issue of safe memory reclamation, that is dealing with the disposal of
        data that can be accessed by multiple tasks, is also required.  Memory
        reclamation algorithms such as `hazard pointers`_, `epoch-based
        reclamation`_, and `quiescent state-based reclamation`_ all have their
        `different use-cases and tradeoffs`_.

        As not all algorithms can be non-blocking, the support for high
        performance blocking constructs, such as `CC-Synch`_, a successor to
        `flat-combining`_, has proven to provide scalability even under mutual
        exclusion by combining multiple requests to be dispatched by the
        current lock-owner. As well, `Software Transactional Memory`_ while
        experimental has interesting applications and concepts that can be
        borrowed from.

        It should be emphasized that this is an exploratory and as such the
        inclusion and implementation of all of the above is not assumed and
        merely serve as a list of ideas. The goal of the project is the
        exploration of high-performance algorithms and data structures, whether
        they are possible to implement or are advantageous to Chapel.


    :Expected results:

        The project has a large number of milestones, and it is not expected
        for all of them be completed. The ones that are required to be
        completed by the end of the program are the following:

        - Implement a prototype runtime implementation of atomic operations on class instances by using 128-bit compare-and-swap on available hardware, (I.E: Intel’s ``CMPXCHG128B``), with a software fallback (Multiword Compare-And-Swap).
        - Implement some non-blocking data structures as proof-of-correctness tests (without regard for memory reclamation yet...)
        - Implement one of the memory reclamation or blocking abstractions mentioned above.

        Ideally and if time permits the student may also complete the following:

        - Implement a second memory reclamation or blocking abstractions and compare it to the previously implemented abstraction. In particular, measure performance in the previously implemented data structures and compare relative performance and overhead of both.
        - Implement a way to distribute non-blocking algorithms across multiple nodes. Does not necessarily need to scale.



    :Required knowledge:
        * C
        * Multithreading
        * Debugging with GDB

    :Optional knowledge:

        * Chapel
        * any of the topics mentioned in the project description

    :Mentor(s):
        `Louis Jenkins`_

.. _Louis Jenkins: https://louisjenkinscs.github.io/
.. _non-blocking: https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-579.pdf
.. _hazard pointers: https://www.research.ibm.com/people/m/michael/ieeetpds-2004.pdf
.. _epoch-based reclamation: http://concurrencykit.org/presentations/ebr.pdf
.. _quiescent state-based reclamation: http://www.rdrop.com/~paulmck/scalability/paper/rclockpdcsproof.pdf
.. _different use-cases and tradeoffs: http://www.cs.toronto.edu/~tomhart/papers/tomhart_thesis.pdf
.. _CC-Synch: https://opencourses.uoc.gr/courses/pluginfile.php/17173/mod_resource/content/0/HY586-Section3.pdf
.. _flat-combining: https://people.csail.mit.edu/shanir/publications/Flat%20Combining%20SPAA%2010.pdf
.. _Software Transactional Memory: https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf
.. _long history: https://lwn.net/Articles/262464/
.. _libURCU: https://www.efficios.com/pub/rcu/urcu-main.pdf


.. topic:: Decision Trees Library

    :Description:
        Among non-neural network based approaches, Decision Trees, SVMs and
        their ensembles are quite popular. As a start, we want to support
        Decision Trees and/or it’s ensembles in this module. The scope of this
        project is to develop a Decision Trees module in Chapel.

    :Expected results:
        A Decision Tree module written in Chapel.

        The steps to reach this result are as follows:

            * Implement Decision Trees using the `ID3 algorithm`_. The `scikit-learn`_ interface is a good example API.
            * Implement a simple `data loading module`_ which includes data preprocessing modules, `dataset download`_ and management and feature importance modules.
            * Implement simple data wrangling utilities such as normalizations, metrics and statistical methods.
            * Write unit tests, docs, and examples.
            * Write performance tests and benchmark against Decision Trees in other mainstream frameworks, such as scikit-learn.

        Once the base project is completed, there are several directions the student can pursue:
            * Random Forests
            * Generalized Linear Models
            * Prediction  Accuracy Metrics
            * Helpers such as Grid Search and CV Folds Score.
            * Simple models such as Linear Regression/Classification, Naive Bayes, KNN, etc.

    :Required knowledge:
        * Understanding of basic Statistical Machine Learning
        * Ability to code mathematical programs

    :Optional knowledge:
        * Chapel

    :Mentor(s):
        `Sarthak Munshi`_


.. _Sarthak Munshi: https://saru.ml
.. _scikit-learn: http://scikit-learn.org/stable/modules/tree.html
.. _ID3 algorithm: https://github.com/igrigorik/decisiontree
.. _data loading module: http://pytorch.org/docs/master/data.html#torch.utils.data.DataLoader
.. _dataset download: http://scikit-learn.org/stable/datasets/index.html


.. Not using categories until necessary
.. Libraries and Applications
.. --------------------------
.. Performance
.. -----------
.. Compatibility
.. -------------
.. Compiler
.. --------
.. Runtime
.. -------
.. Infrastructure
.. --------------
.. Tools
.. -----

